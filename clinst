#!/usr/bin/env sh
# clinst - Execute commands using a specific directory of files and variables
# Copyright (C) 2021-2022 Peter Willis
set -eu
[ "${DEBUG:-0}" = "1" ] && set -x

CLINST_VER="${CLINST_VER:-v3.0.0}"
CLINST_HTTP_PATH="${CLINST_HTTP_PATH:-https://raw.githubusercontent.com/peterwwillis/clinst/main}"
HOME="${HOME:-$(getent passwd "$(id -u)" | cut -d : -f 6)}"
export CLINST_DIR="${CLINST_DIR:-$HOME/.clinst}"
export CLINST_BIN_DIR="${CLINST_BIN_DIR:-$CLINST_DIR/.bin}"
export CLINST_EXT_DIR_NAME="${CLINST_EXT_DIR_NAME:-.clext}"
export CLINST_EXT_DIR="${CLINST_EXT_DIR:-$CLINST_DIR/$CLINST_EXT_DIR_NAME}"

### General clinst functions

_usage () {
    printf "%s\n" "
Usage: $0 [OPTS]
       $0 [OPTS] [CMD [ARGS ..]]
Opts:
	-h			This screen
	-i			Clear environment variables. Must be first argument
	-l [ENVIRON]		List environments
	-L [EXT]		List remote extensions
	-n ENVIRON		Create a new environment ENVIRON
	-E EXT[=V] 	 	Use (optional) version V of extension EXT
	-e ENVIRON		Use environment ENVIRON
	-D      		Set what environment (-e) and extension (-E) a wrapper should point
	          		to by default
	-r FILE			Install a list of extensions from FILE
	-X CMD [ARG ..]		(internal function) Run command for an extension
	-W			Disables wrapper mode
	-s			Outputs Bourne shell features to include in your ~/.bashrc
	-f			Force mode
 	-V			Version of clinst
	-q			Quiet mode
" 1>&2
  exit 1
}
_err () { printf "%s\n" "$0: Error: $*" ; exit 1 ; }
_echo_err () { [ "$CLINST_QUIET" -eq 1 ] || printf "%s\n" "$(basename "$0"): $*" 1>&2 ; }
_clinst_list () {
    for d in "$@"
    do  [ -d "$CLINST_DIR/$(basename "$d")" ] && basename "$d"
    done
}
_clinst_listext () {
    if    [ $# -gt 0 ]
    then  CLINST_E_NAME="$1"
          _ext_variables
          _ext_versions
    else  [ ! -r "$CLINST_DIR/CHECKSUMS.sha256" -o "$CLINST_FORCE" = "1" ] && eval curl -fsSL ${CURL_OPTS:-} -o "$CLINST_DIR/CHECKSUMS.sha256" "$CLINST_HTTP_PATH/CHECKSUMS.sha256"
          {    [ -r "$CLINST_DIR/CHECKSUMS.sha256" ] && grep -e "  $CLINST_EXT_DIR_NAME/.*\.ex\?$" "$CLINST_DIR/CHECKSUMS.sha256"  | sed -e "s/.*$CLINST_EXT_DIR_NAME\///; s/\.ex\?$//"
               [ -d "$CLINST_EXT_DIR/" ] && { ls "$CLINST_EXT_DIR/" | sed -e 's/\.ex\?$//g' ; }
          } | sort | uniq
    fi
}
_clinst_new () {
    _env="$1"; shift
    [ -d "$CLINST_DIR/$_env" ] && [ ! "$CLINST_FORCE" = "1" ] && _err "Environment '$CLINST_DIR/$_env' already exists"
    _echo_err "Creating new environment '$CLINST_DIR/$_env'"
    mkdir -p "$CLINST_DIR/$_env/bin"
    printf "%s\n" 'pmunge () { if ! echo "$PATH"|/bin/grep -Eq "(^|:)$1($|:)"; then if [ "${2:-}" = "after" ]; then PATH="$PATH:$1"; else PATH="$1:$PATH"; fi;fi; }' >> "$CLINST_DIR/$_env/.env"
    printf "%s\n" 'pmunge "'"$CLINST_DIR/$_env/bin"'"' >> "$CLINST_DIR/$_env/.env"
}
_clinst_ext_run () {
    # shell function names have limited character sets; squash to '_'
    funcname="$(printf "%s" "$1" | tr -c 'a-zA-Z0-9_' _)"; shift
    if    set | grep "^ext_$funcname=" >/dev/null
    then  eval "handler=\${ext_$funcname}"; eval "$handler" "$@"

    elif  [ -e "$CLINST_EXT_DIR/$CLINST_E_NAME.ex" ] && _ext_help_grep "$funcname"
    then  "$CLINST_EXT_DIR/$CLINST_E_NAME.ex" "$funcname" "$@"

    else  eval "handler=ext_$funcname ; \$handler" "$@"
    fi
}
_clinst_ext_download () {
    clinst_http_ext_path="$CLINST_HTTP_PATH"
    if  [ "${clinst_already_downloaded:-0}" = "1" ] \
        || [ "$CLINST_FORCE" = "0" ] \
        && [ -e "$CLINST_EXT_DIR/$CLINST_E_NAME.ex" -o -e "$CLINST_EXT_DIR/$CLINST_E_NAME.e" ]
    then return 0 ; fi
    if [ -n "${ghrepo:-}" ] ; then
        if [ -z "${ghbranch:-}" ] ; then
            ghbranch="$(eval curl -fsSL ${CURL_OPTS:-} https://api.github.com/repos/$ghrepo | grep -e "^[[:space:]]*\"default_branch\":" | sed -e 's/^[[:space:]]*"default_branch": "\([^"]\+\)".*/\1/')"
            clinst_http_ext_path="https://raw.githubusercontent.com/$ghrepo/$ghbranch"
        fi
    fi
    _echo_err "Downloading extension '$CLINST_E_NAME'"
    clinst_already_downloaded=0
    for ext in e ex ; do
        lf="$CLINST_EXT_DIR/$CLINST_E_NAME.$ext"
        rf="$clinst_http_ext_path/$CLINST_EXT_DIR_NAME/$CLINST_E_NAME.$ext"
        set +e; errmsg="$( eval curl -fsSL ${CURL_OPTS:-} -o "$lf" "$rf" 2>&1 )" ; res=$? ; set -e
        if [ "$res" -eq 0 ] ; then
            clinst_already_downloaded=1; break
        fi
    done
    [ "$clinst_already_downloaded" -eq 1 ] || _err "Could not download extension '$CLINST_E_NAME': $errmsg"
    chmod +x "$lf"
    if [ "${CLINST_EXPERIMENT_GPG_VALIDATE:-0}" = "1" ] ; then
        if eval curl -fsSL ${CURL_OPTS:-} -o "$lf.asc" "$rf.asc"
        then  _clinst_ext_gpg_validate
        else  _echo_err "Error downloading signature file '$lf.asc'; not verifying extension signature!"
              rm -rf "$lf.asc" "$lf"
        fi
    fi
}
_clinst_ext_gpg_validate () {
    for ext in .e .ex ; do
        if [ -e "$CLINST_EXT_DIR/$CLINST_E_NAME.$ext.asc" ] ; then
            if command -v gpg 2>/dev/null 1>&2 && ! gpg --verify "$CLINST_EXT_DIR/$CLINST_E_NAME.$ext.asc" ; then
                _echo_err "Error: validation of '$CLINST_E_NAME.$ext.asc' failed! Make sure you import the public key first and try again."
                exit 1
            fi
        fi
    done
}
_clinst_ext_install () {
    ext="${1%%=*}" ver="${1#*=}" environ="${2:-}"
    if [ "${ext%%/*}" = "github.com" ] ; then
        ghrepo="${ext#github.com/}"
        ghrepo="${ghrepo%%=*}"
        ghbranch="${ghrepo##*@}"
        ghrepo="${ghrepo%@*}"
        ext="${ghrepo##*/}"
        [ "$ver" = "$1" ] && ver="latest"
        if [ -n "${ghbranch:-}" ] && [ -n "${ghrepo:-}" ] && [ "${ghbranch:-}" = "${ghrepo:-}" ] ; then
            ghbranch=""
        fi
    fi
    export CLINST_E_NAME="$ext"
    _ext_variables
    CLINST_E_VERSION="${CLINST_E_VERSION:-$(_ext_latest)}"
    if [ -n "$ver" ] && [ ! "$ver" = "$CLINST_E_NAME" ] ; then
        export CLINST_E_VERSION="$ver"
    fi
    # Set the default environment name
    if [ "${environ:-}" = "${ext:-}" ] ; then
        CLINST_E_ENVIRON="$CLINST_E_NAME${CLINST_E_VERSION:+=$CLINST_E_VERSION}"
    elif [ -n "${environ:-}" ] ; then
        CLINST_E_ENVIRON="$environ"
    fi
    export CLINST_E_VERSION CLINST_E_ENVIRON CLINST_E_INSTDIR="$CLINST_DIR/$CLINST_E_ENVIRON"
    [ -d "$CLINST_DIR/$CLINST_E_ENVIRON" ] || _clinst_new "$CLINST_E_ENVIRON"
    _echo_err "Loading extension '$CLINST_E_NAME' version '$CLINST_E_VERSION'"
    _ext_clean; _ext_download; _ext_unpack; _ext_install_local; _ext_test; _ext_clean; _ext_install_wrapper
}
_clinst_exec () {
  export CLINST_E_ENVIRON="${CLINST_E_ENVIRON:-$1}" # default environment name to command name
  [ "${CLINST_WRAPPER:-1}" -eq 1 ]       && _clinst_wrapper "$CLINST_E_ENVIRON"
  [ -d "$CLINST_DIR/$CLINST_E_ENVIRON" ] || _err "No environment '$CLINST_DIR/$CLINST_E_ENVIRON' found"
  if    [ -e "$CLINST_DIR/$CLINST_E_ENVIRON/.env" ]
  then  set -a;  . "$CLINST_DIR/$CLINST_E_ENVIRON/.env"
  else  _echo_err "Warning: no '$CLINST_DIR/$CLINST_E_ENVIRON/.env' found"
  fi
  _echo_err "Executing $(command -v "$1")"
  # unset variables to prevents infinite loops
  unset CLINST_E_ENVIRON CLINST_E_VERSION CLINST_E_NAME CLINST_FORCE
  exec env "$@"
}
_clinst_default_wrapper () {
    [ -n "${CLINST_E_NAME:-}" -o -n "${CLINST_E_ENVIRON:-}" ] || _err "Please pass -e or -E (or both)"
    if [ -n "${CLINST_E_ENVIRON:-}" ] ; then
        if [ -z "${CLINST_E_NAME:-}" ] ; then
            ext="${CLINST_E_ENVIRON%%=*}" ver="${CLINST_E_ENVIRON#*=}"
            CLINST_E_NAME="$ext"
            # do not set CLINST_E_VERSION based on CLINST_E_ENVIRON; let the user
            # pass -E option if they want to pin the extension version
        fi
    fi
    if [ -n "${CLINST_E_NAME:-}" ] ; then
        ext="${CLINST_E_NAME%%=*}" ver="${CLINST_E_NAME#*=}"
        CLINST_E_NAME="$ext"
        [ "$ver" = "$ext" ] || CLINST_E_VERSION="$ver"
    fi
    [ -n "${CLINST_E_ENVIRON:-}" ] || CLINST_E_ENVIRON="$CLINST_E_NAME${CLINST_E_VERSION:+=$CLINST_E_VERSION}"
    _echo_err "Switching default environment for wrapper $ext to $CLINST_E_ENVIRON"
    _ext_variables # NOTE: loads whatever CLINST_E_* variables the extension outputs
    CLINST_FORCE=1 _ext_install_wrapper "$CLINST_E_ENVIRON"
}
_clinst_wrapper () {
    CLINST_E_NAME="${CLINST_E_NAME:-$1}" # default extension name to environment name
    ext="${CLINST_E_NAME%%=*}" ver="${CLINST_E_NAME#*=}"
    [ "$ver" = "$ext" ] || CLINST_E_VERSION="$ver"
    if    [ -z "${CLINST_E_VERSION:-}" ]
    then  cwd="$(pwd)"
          while [ ! "$(dirname "$cwd")" = "/" ]
          do
                if    [ -r "$cwd/.$CLINST_E_NAME-version" ]
                then  CLINST_E_VERSION="$(cat "$cwd/.$CLINST_E_NAME-version")"
                      _echo_err "Found '$cwd/.$CLINST_E_NAME-version' = '$CLINST_E_VERSION'"
                      break
                else  cwd="$(dirname "$cwd")"
                fi
          done
          # Wrapper version detection makes an environment of extension name + version
          [ -n "${CLINST_E_VERSION:-}" ] && CLINST_E_ENVIRON="$CLINST_E_NAME=$CLINST_E_VERSION"
    fi
    # Try to auto-install extensions in case a new/different version is needed
    _clinst_list "$CLINST_E_ENVIRON" >/dev/null || _clinst_ext_install "$CLINST_E_NAME" "$CLINST_E_ENVIRON"
}
_clinst_bourne () {
    cat <<'EOBOURNE'
pmunge () { if ! echo "$PATH"|/bin/grep -Eq "(^|:)$1($|:)";then if [ "$2" = "after" ]; then PATH="$PATH:$1"; else PATH="$1:$PATH"; fi;fi; } ;
pmunge "$HOME/.clinst/.bin" ; export PATH ;
if declare -F "command_not_found_handle" >/dev/null ; then
    cnfhn="old_cnfh_$(printf "%(%s)T_$$_$RANDOM")" ;
    eval "$(echo "$cnfhn()"; declare -f command_not_found_handle | tail -n +2)" ;
fi ;
eval 'function command_not_found_handle () {
        if clinst -L|grep -qe "^$1$"; then clinst -E "$1" "$@";
        elif [ -n "'"$cnfhn"'" ] ; then '"$cnfhn"' "$@";
        else echo "$1: command not found"; return 127; fi; 
      };'
EOBOURNE
    echo "export CLINST_VER=$CLINST_VER"
}


### Extension functions

CLINST_EXT_HELP=""
_ext_help_grep () {
    CLINST_EXT_HELP="$("$CLINST_EXT_DIR/$CLINST_E_NAME.ex" "help" | grep -A999 "^Commands:$")"
    # Support 'install-local' and 'install_local' (function names can't have '-' anyway)
    cmd="$1" altcmd="$(printf '%s' "$1" | tr -- -_ _-)" ; shift
    if    [ "$(expr "$CLINST_EXT_HELP" : ".*[^:space::graph:]  $cmd")" -ne 0 ] \
          || [ "$(expr "$CLINST_EXT_HELP" : ".*[^:space::graph:]  $altcmd")" -ne 0 ]
    then  return 0 ; fi
    return 1
}
_ext_variables () {  eval $(_clinst_ext_run "variables" "$@") ; }
ext_variables () {
    _clinst_ext_download
    if    [ -e "$CLINST_EXT_DIR/$CLINST_E_NAME.e" ]
    then  cat "$CLINST_EXT_DIR/$CLINST_E_NAME.e"
    elif  [ -e "$CLINST_EXT_DIR/$CLINST_E_NAME.ex" ]
    then  "$CLINST_EXT_DIR/$CLINST_E_NAME.ex" "variables" "$@"
    else  _err "Error: no extension '$CLINST_E_NAME' found!" 1>&2
    fi
}
_ext_test () {
    _echo_err "$CLINST_E_NAME: Testing"
    _clinst_ext_run "test" "$@"
}
ext_test () { "$CLINST_E_INSTDIR/bin/$CLINST_E_BIN_NAME" --version 2>/dev/null 1>&2 ; }
_ext_clean_install () {
    _echo_err "$CLINST_E_NAME: Removing '$CLINST_E_INSTDIR'"
    _clinst_ext_install "clean_install" "$@"
}
ext_clean_install () {
    rm -rf "${CLINST_E_INSTDIR:?}/bin/" "${CLINST_E_INSTDIR:?}/usr/" "${CLINST_E_INSTDIR:?}/.env"
}
_ext_clean () {
    _echo_err "$CLINST_E_NAME: Removing temporary download files"
    _clinst_ext_run "clean" "$@"
}
ext_clean () {  rm -rf "${CLINST_E_INSTDIR:?}/download/" ; }
_ext_install_local () {
    _echo_err "$CLINST_E_NAME: Installing locally";
    _clinst_ext_run "install_local" "$@"
}
ext_install_local () {
    mkdir -p "$CLINST_E_INSTDIR/bin"
    eval ln -sf "$CLINST_E_INSTDIR/${1:-/usr/bin/$CLINST_E_BIN_NAME}" "$CLINST_E_INSTDIR/bin/$CLINST_E_BIN_NAME"
}
_ext_install_wrapper () {
    _echo_err "$CLINST_E_NAME: Installing wrapper"
    _clinst_ext_run "install_wrapper" "$@"
}
ext_install_wrapper () {
    [ -d "$CLINST_BIN_DIR" ] || mkdir -p "$CLINST_BIN_DIR"
    if [ ! -e "$CLINST_BIN_DIR/$CLINST_E_BIN_NAME" -o "${CLINST_FORCE:-0}" = "1" ] ; then
        line="#!/usr/bin/env sh\n"
        line="${line}exec clinst -E $CLINST_E_NAME"
        line="${line} -e $CLINST_E_ENVIRON $CLINST_E_BIN_NAME \"\$@\"\n"
        printf "$line"  > "$CLINST_BIN_DIR/$CLINST_E_BIN_NAME"
    fi
    [ -x "$CLINST_BIN_DIR/$CLINST_E_BIN_NAME" ] || chmod +x "$CLINST_BIN_DIR/$CLINST_E_BIN_NAME"
}
_ext_latest () {  _ext_versions | head -1 ; }
_ext_url () {
    export CLINST_E_VERSION="${CLINST_E_VERSION:-$(_ext_latest)}" # pass version to extension
    _clinst_ext_run "url" "$@"
}
ext_url () {  eval printf "$CLINST_E_BASEURL\\\n" "$CLINST_E_BASEURL_ARGS" ; }
_ext_unpack () {
    _echo_err "$CLINST_E_NAME: Unpacking to '$CLINST_E_INSTDIR'"
    _clinst_ext_run "unpack" "$@"
}
ext_unpack () {
    mkdir -p "$CLINST_E_INSTDIR/usr/bin"
    chmod +x "$CLINST_E_INSTDIR/download/$CLINST_E_DLFILE"
    eval mv "$CLINST_E_INSTDIR/download/$CLINST_E_DLFILE" "$CLINST_E_INSTDIR/usr/bin/$CLINST_E_BIN_NAME"
}
ext_unpack_unzip () {
    mkdir -p "$CLINST_E_INSTDIR/$1"
    unzip -q -o -d "$CLINST_E_INSTDIR/$1" "$CLINST_E_INSTDIR/download/$CLINST_E_DLFILE"
}
ext_unpack_untar () {
    mkdir -p "$CLINST_E_INSTDIR/$1"
    tar -C "$CLINST_E_INSTDIR/$1" -xf "$CLINST_E_INSTDIR/download/$CLINST_E_DLFILE"
}
_ext_download () {
    _echo_err "$CLINST_E_NAME: Downloading artifact";
    _clinst_ext_run "download" "$@"
}
ext_download () {
    mkdir -p "$CLINST_E_INSTDIR/download"
    if  [ ! -e "$CLINST_E_INSTDIR/download/$CLINST_E_DLFILE" ] || [ "${CLINST_FORCE:-0}" = "1" ] ; then
        eval curl -fSL ${CURL_OPTS:-} "$(_ext_url)" -o "$CLINST_E_INSTDIR/download/$CLINST_E_DLFILE"
    fi
}
_ext_versions () {
    _ext_variables
    _clinst_ext_run "versions" "$@"
}
ext_versions_gh () {
    [ -n "${GITHUB_TOKEN:-}" ] && CURL_OPTS="${CURL_OPTS:-} -H \"Authorization: token $GITHUB_TOKEN\""
    next_url="$1"
    while [ -n "$next_url" ]
    do
          output="$(eval curl -ifsSL ${CURL_OPTS:-} "$next_url")"
          printf "%s\n" "$output" | awk -F '"' "/\"$2\":/{print \$4}" | sed -e 's/^v//'
          next_url="$(printf "%s\n" "$output" | grep '^link:' \
              | sed -e 's/link: //; s/, /\n/g; s/[<>]//g; s/; rel/ rel/g; s/\(https:\/\/[^ ]\+\) rel="\([a-z]\+\)"/\2 \1/g' \
              | awk '/next / { print $2}')"
    done
}
ext_versions_ghtags () {  ext_versions_gh "$1/tags" "name" ;  }
ext_versions_ghreleases () {  ext_versions_gh "$1/releases" "tag_name" ; }
ext_versions_pypi () {
    [ -z "${PYTHON:-}" ] && command -v python3 >/dev/null && PYTHON="python3"
    [ -z "${PYTHON:-}" ] && command -v python  >/dev/null && PYTHON="python"
    eval curl -fsSL ${CURL_OPTS:-} "$1" | \
    {
        if    command -v $PYTHON >/dev/null && $PYTHON -c 'import sys,json,collections;'
        then  $PYTHON -c 'import sys,json,collections; j=(json.loads(sys.stdin.read(), object_pairs_hook=collections.OrderedDict))["releases"]; print("\n".join([k for k in j.keys()]))' | tac
        elif  command -v jq >/dev/null
        then  jq -r '.releases | keys | .[]' | tac
        else  grep -e '"[0-9]\+.*: \[' | sed -e 's/^[[:space:]]\+"\(.*\)": \[/\1/g' | tac
        fi;
    }
}
ext_versions_hc () { ext_versions_hashicorp "$@" ; }
ext_versions_hashicorp () {
    eval curl -fsSL ${CURL_OPTS:-} "$1" | grep -e "<a href=\"/$CLINST_E_NAME/" | grep -v alpha | cut -d \" -f 2 | cut -d / -f 3 | sed -e 's/^v//'
}
uname_m_amd () { uname -m | sed -e 's/x86_/amd/g' ; }
uname_m () { uname -m ; }
uname_lc () { uname | tr '[:upper:]' '[:lower:]' ; }


### Main program
if    [ $# -lt 1 ]
then  _usage
fi

[ "$1" = "-i" ] && shift 1 && exec env -i "$0" "$@"

CLINST_FORCE=0 CLINST_QUIET="${CLINST_QUIET:-0}"
while getopts "hnlLE:e:Dr:X:WfVqs" args
do
      case "$args" in
          h)  _usage ;;
          n)  CLINST_NEW=1 ;;
          l)  CLINST_LIST=1 ;;
          L)  CLINST_LISTEXT=1 ;;
          E)  CLINST_E_NAME="$OPTARG" ;;
          e)  CLINST_E_ENVIRON="$OPTARG" ;;
          D)  CLINST_DEFAULT_WRAPPER=1 ;;
          r)  CLINST_REQUIRES="$OPTARG" ;;
          X)  CLINST_XCALL="$OPTARG" ;;
          W)  CLINST_WRAPPER=0 ;;
          f)  export CLINST_FORCE=1 ;;
          V)  echo "clinst $CLINST_VER" ; exit 0 ;;
          q)  CLINST_QUIET=1 ;;
          s)  _clinst_bourne ; exit 0 ;;
          \?) _usage ;;
      esac
done
shift $((OPTIND-1))

for  d in "$CLINST_DIR" "$CLINST_BIN_DIR" "$CLINST_EXT_DIR"
do   [ -d "$d" ] || mkdir -p "$d"
done

if    [ -n "${CLINST_XCALL:-}" ]
then  if   command -v ext_"$CLINST_XCALL" >/dev/null
      then ext_"$CLINST_XCALL" "$@"
      else _ext_"$CLINST_XCALL" "$@"
      fi

elif  [ "${CLINST_DEFAULT_WRAPPER:-0}" = "1" ]
then  _clinst_default_wrapper "$@"

elif  [ ${CLINST_NEW:-0} -eq 1 ]
then  _clinst_new "$@"

elif  [ ${CLINST_LIST:-0} -eq 1 ]
then  if    [ $# -gt 0 ]
      then  _clinst_list "$@"
      else  _clinst_list "$CLINST_DIR"/*
      fi

elif  [ ${CLINST_LISTEXT:-0} -eq 1 ]
then  _clinst_listext "$@"

elif  [ -n "${CLINST_REQUIRES:-}" ]
then  while read -r LINE ; do $0 -E "$LINE" ; done < "$CLINST_REQUIRES"

elif  [ $# -lt 1 -a -n "${CLINST_E_NAME:-}" ]
then  _clinst_ext_install "$CLINST_E_NAME" "${CLINST_E_ENVIRON:-}"

elif  [ $# -gt 0 ]
then  _clinst_exec "$@"

fi
