#!/usr/bin/env sh
# clenv - Execute commands using a specific directory of files and variables
# Copyright (C) 2021 Peter Willis
set -eu
[ "${DEBUG:-0}" = "1" ] && set -x

CLENV_VER="2.2.0"
CLENV_HTTP_PATH="${CLENV_HTTP_PATH:-https://raw.githubusercontent.com/peterwwillis/clenv/v$CLENV_VER}"
HOME="${HOME:-$(getent passwd $(id -u) | cut -d : -f 6)}"
export CLENV_DIR="${CLENV_DIR:-$HOME/.clenv}"

### General clenv functions

_usage () {
    printf "%s\n" "
Usage: $0 [OPTS]
       $0 [OPTS] [CMD [ARGS ..]]
Opts:
	-h			This screen
	-i			Clear environment variables. Must be first argument
	-l [ENVIRON]		List environments
	-n ENVIRON		Create a new environment ENVIRON
	-E EXT[=V] 	 	Use (optional) version V of extension EXT
	-e ENVIRON		Use environment ENVIRON
	-r FILE			Install a list of extensions from FILE
	-X CMD [ARG ..]		(internal function) Run command for an extention
	-W			Disables wrapper mode
	-f			Force mode
 	-V			Version of clenv
	-q			Quiet mode
"
  exit 1
}
_err () { printf "%s\n" "$0: Error: $*" ; exit 1 ; }
_echo_err () { [ $CLENV_QUIET -eq 1 ] || printf "%s\n" "$(basename "$0"): $*" 1>&2 ; }
_clenv_list () { for d in "$@" ; do [ -d "$CLENV_DIR/$(basename "$d")" ] && basename "$d"; done ; }
_clenv_new () {
    _env="$1"; shift
    [ -d "$CLENV_DIR/$_env" ] && [ ! "$CLENV_FORCE" = "1" ] && _err "Environment '$CLENV_DIR/$_env' already exists"
    _echo_err "Creating new environment '$CLENV_DIR/$_env'"
    mkdir -p "$CLENV_DIR/$_env/bin"
    printf "%s\n" 'pmunge () { if ! echo "$PATH"|/bin/grep -Eq "(^|:)$1($|:)"; then if [ "${2:-}" = "after" ]; then PATH="$PATH:$1"; else PATH="$1:$PATH"; fi;fi; }' >> "$CLENV_DIR/$_env/.env"
    printf "%s\n" 'pmunge "'"$CLENV_DIR/$_env/bin"'"' >> "$CLENV_DIR/$_env/.env"
}
_clenv_ext_run () {  "$CLENV_DIR/.ext/$CLENV_E_NAME" "$@"; }
_clenv_ext_install () {
    ext="${1%%=*}" ver="${1#*=}" environ="${2:-}"
    if [ $# -lt 2 -o -z "$environ" ] ; then shift 1; environ="$ext";       else shift 2;  fi
    if [ ! "$ver" = "$ext" ]         ; then export CLENV_E_VERSION="$ver";                fi
    export CLENV_E_NAME="$ext" CLENV_E_ENVIRON="$environ" CLENV_E_INSTDIR="$CLENV_DIR/$environ"
    if [ "$CLENV_FORCE" = "1" ] || [ ! -e "$CLENV_DIR/.ext/$CLENV_E_NAME" ] ; then
        _echo_err "Installing extention '$CLENV_E_NAME'"
        if   command -v curl >/dev/null ; then  
            eval curl -fsSL ${CURL_OPTS:-} -o "$CLENV_DIR/.ext/$CLENV_E_NAME" "$CLENV_HTTP_PATH/.ext/$CLENV_E_NAME"
        else _err "Please install 'curl'." ; fi
        chmod +x "$CLENV_DIR/.ext/$CLENV_E_NAME"
    fi
    [ -z "${CLENV_E_VERSION:-}" ]        && CLENV_E_VERSION="latest"
    [ "$CLENV_E_VERSION" = "latest" ]    && CLENV_E_VERSION="$(_ext_latest)"
    export CLENV_E_VERSION
    [ -d "$CLENV_DIR/$CLENV_E_ENVIRON" ] || _clenv_new "$CLENV_E_ENVIRON"
    _echo_err "Loading extension '$CLENV_E_NAME' version '$CLENV_E_VERSION'"
    _ext_variables; _ext_clean; _ext_download; _ext_unpack; _ext_install_local; _ext_test; _ext_clean; _ext_install_wrapper
}
_clenv_exec () {
  export CLENV_E_ENVIRON="${CLENV_E_ENVIRON:-$1}" # default environment name to command name
  [ ${CLENV_WRAPPER:-1} -eq 1 ]        && _clenv_wrapper "$CLENV_E_ENVIRON"
  [ -d "$CLENV_DIR/$CLENV_E_ENVIRON" ] || _err "No environment '$CLENV_DIR/$CLENV_E_ENVIRON' found"
  if [ -r "$CLENV_DIR/$CLENV_E_ENVIRON/.env" ] ; then
      set -a;  . "$CLENV_DIR/$CLENV_E_ENVIRON/.env"
  else _echo_err "Warning: no '$CLENV_DIR/$CLENV_E_ENVIRON/.env' found" ; fi
  _echo_err "Executing $(which "$1")"
  # unset variables to prevents infinite loops
  unset CLENV_E_ENVIRON CLENV_E_VERSION CLENV_E_NAME CLENV_FORCE
  exec env "$@"
}
_clenv_wrapper () {
    CLENV_E_NAME="${CLENV_E_NAME:-$1}" # default extension name to environment name
    ext="${CLENV_E_NAME%%=*}" ver="${CLENV_E_NAME#*=}"
    if [ ! "$ver" = "$ext" ] ; then CLENV_E_VERSION="$ver"; fi
    if [ -z "${CLENV_E_VERSION:-}" ] ; then
        cwd="$(pwd)"
        while [ ! "$(dirname "$cwd")" = "/" ] ; do
            _echo_err "Looking for '$cwd/.$CLENV_E_NAME-version'"
            if [ -r "$cwd/.$CLENV_E_NAME-version" ] ; then
                CLENV_E_VERSION="$(cat "$cwd/.$CLENV_E_NAME-version")"
                _echo_err "Found '$cwd/.$CLENV_E_NAME-version' = '$CLENV_E_VERSION'"
                break
            else
                cwd="$(dirname "$cwd")"
            fi
        done
        # Wrapper version detection makes an environment of extension name + version
        [ -n "${CLENV_E_VERSION:-}" ] && CLENV_E_ENVIRON="$CLENV_E_NAME=$CLENV_E_VERSION"
    fi
    # Try to auto-install extensions in case a new/different version is needed
    _clenv_list "$CLENV_E_ENVIRON" >/dev/null || _clenv_ext_install "$CLENV_E_NAME" "$CLENV_E_ENVIRON"
}


### Extension functions

CLENV_EXT_HELP=""
_ext_help_grep () {
    CLENV_EXT_HELP="${CLENV_EXT_HELP:-$(_clenv_ext_run help)}"
    if [ $(expr "$CLENV_EXT_HELP" : ".*  $*") -ne 0 ] ; then return 0; else return 1; fi
}
_ext_variables () {  eval $(_clenv_ext_run variables) ;  }
_ext_test () {
    _echo_err "$CLENV_E_NAME: Testing"; 
    if _ext_help_grep "test"; then  _clenv_ext_run "test"
    else "$CLENV_E_INSTDIR/bin/$CLENV_E_BIN_NAME" --version 2>/dev/null 1>/dev/null ; fi
}
_ext_clean_install () {
    _echo_err "$CLENV_E_NAME: Removing '$CLENV_E_INSTDIR'"; 
    if _ext_help_grep "clean-install"; then _clenv_ext_run "clean-install"
    else rm -rf "${CLENV_E_INSTDIR:?}/bin/" "${CLENV_E_INSTDIR:?}/usr/" "${CLENV_E_INSTDIR:?}/.env" ; fi
}
_ext_clean () {
    _echo_err "$CLENV_E_NAME: Removing temporary download files"; 
    if _ext_help_grep "clean"; then _clenv_ext_run "clean"
    else rm -rf "${CLENV_E_INSTDIR:?}/download/" ; fi
}
_ext_install_local () {
    _echo_err "$CLENV_E_NAME: Installing locally";
    if [ $# -lt 1 ] && _ext_help_grep "install-local" ; then _clenv_ext_run "install-local"
    else  
        mkdir -p "$CLENV_E_INSTDIR/bin"
        ln -sf "$CLENV_E_INSTDIR/${1:-/usr/bin/$CLENV_E_BIN_NAME}" "$CLENV_E_INSTDIR/bin/$CLENV_E_BIN_NAME"
    fi
}
_ext_install_wrapper () {
    _echo_err "$CLENV_E_NAME: Installing wrapper"
    if _ext_help_grep "install-wrapper"; then _clenv_ext_run "install-wrapper"
    else
        [ -d "$CLENV_DIR/.bin" ] || mkdir -p "$CLENV_DIR/.bin"
        if [ ! -e "$CLENV_DIR/.bin/$CLENV_E_BIN_NAME" -o "${CLENV_FORCE:-0}" = "1" ] ; then
            printf "#!/usr/bin/env sh\nexec clenv -E $CLENV_E_NAME -e $CLENV_E_ENVIRON $CLENV_E_BIN_NAME \"\$@\"\n" > "$CLENV_DIR/.bin/$CLENV_E_BIN_NAME"
        fi
        [ -x "$CLENV_DIR/.bin/$CLENV_E_BIN_NAME" ] || chmod +x "$CLENV_DIR/.bin/$CLENV_E_BIN_NAME"
    fi
}
_ext_latest () {  _ext_versions | head -1 ; }
_ext_url () {  export CLENV_E_VERSION="${CLENV_E_VERSION:-$(_ext_latest)}"; _clenv_ext_run "url"; }
_ext_unpack () { 
    _echo_err "$CLENV_E_NAME: Unpacking to '$CLENV_E_INSTDIR'"
    if _ext_help_grep "unpack" ; then _clenv_ext_run "unpack"
    else
        mkdir -p "$CLENV_E_INSTDIR/usr/bin"
        chmod +x "$CLENV_E_INSTDIR/download/$CLENV_E_DLFILE"
        mv "$CLENV_E_INSTDIR/download/$CLENV_E_DLFILE" "$CLENV_E_INSTDIR/usr/bin/$CLENV_E_BIN_NAME"
    fi
}
_ext_unpack_unzip () { mkdir -p "$CLENV_E_INSTDIR/$1"; unzip -q -o -d "$CLENV_E_INSTDIR/$1" "$CLENV_E_INSTDIR/download/$CLENV_E_DLFILE"; }
_ext_unpack_untar () { mkdir -p "$CLENV_E_INSTDIR/$1"; tar -C "$CLENV_E_INSTDIR/$1" -xf "$CLENV_E_INSTDIR/download/$CLENV_E_DLFILE"; }
_ext_download () {
    _echo_err "$CLENV_E_NAME: Downloading artifact";
    if _ext_help_grep "download" ; then _clenv_ext_run "download"
    else 
        mkdir -p "$CLENV_E_INSTDIR/download"
        eval curl -fSL ${CURL_OPTS:-} "$(_ext_url)" -o "$CLENV_E_INSTDIR/download/$CLENV_E_DLFILE"
    fi
}
_ext_versions () {  _clenv_ext_run "versions" ; }
_ext_versions_gh () {
    [ -n "${GITHUB_TOKEN:-}" ] && CURL_OPTS="${CURL_OPTS:-} -H \"Authorization: token $GITHUB_TOKEN\""
    # Warning: this excludes 'rc' versions
    next_url="$1"; while [ -n "$next_url" ] ; do output="$(eval curl -ifsSL ${CURL_OPTS:-} "$next_url")"
        printf "%s\n" "$output" | awk -F '"' "/\"$2\":/{print \$4}" | sed -e 's/^v//'
        next_url="$(printf "%s\n" "$output" | grep '^link:' \
            | sed -e 's/link: //; s/, /\n/g; s/[<>]//g; s/; rel/ rel/g; s/\(https:\/\/[^ ]\+\) rel="\([a-z]\+\)"/\2 \1/g' \
            | awk '/next / { print $2}')"
    done
}
_ext_versions_ghtags () {  _ext_versions_gh "$1/tags" "name" ;  }
_ext_versions_ghreleases () {  _ext_versions_gh "$1/releases" "tag_name" ; }
_ext_versions_pypi () {
    if command -v python >/dev/null ; then PYTHON="${PYTHON:-python}";
    elif command -v python3 >/dev/null ; then PYTHON="${PYTHON:-python3}"; fi
    eval curl -fsSL ${CURL_OPTS:-} "$1" | {
        if command -v $PYTHON >/dev/null && $PYTHON -c 'import sys,json,collections;' ; then
            $PYTHON -c 'import sys,json,collections; j=(json.loads(sys.stdin.read(), object_pairs_hook=collections.OrderedDict))["releases"]; print("\n".join([k for k in j.keys()]))' | tac
        elif command -v jq >/dev/null ; then jq -r '.releases | keys | .[]' | tac
        else grep -e '"[0-9]\+.*: \[' | sed -e 's/^[[:space:]]\+"\(.*\)": \[/\1/g' | tac
        fi ;
    }
}
_ext_versions_hc () {
    eval curl -fsSL ${CURL_OPTS:-} "$1" | grep -e "<a href=\"/$CLENV_E_NAME/" | grep -v alpha | cut -d \" -f 2 | cut -d / -f 3 | sed -e 's/^v//'
}


### Main program

if [ $# -lt 1 ] ; then
    _usage
fi

[ "$1" = "-i" ] && shift 1 && exec env -i "$0" "$@"

CLENV_FORCE=0 CLENV_QUIET="${CLENV_QUIET:-0}"
while getopts "nlE:e:r:X:WfVq" args ; do
    case "$args" in
        n)  CLENV_NEW=1 ;;
        l)  CLENV_LIST=1 ;;
        E)  CLENV_E_NAME="$OPTARG" ;;
        e)  CLENV_E_ENVIRON="$OPTARG" ;;
        r)  CLENV_REQUIRES="$OPTARG" ;;
        X)  CLENV_XCALL="$OPTARG" ;;
        W)  CLENV_WRAPPER=0 ;;
        f)  export CLENV_FORCE=1 ;;
        V)  echo "clenv v$CLENV_VER" ; exit 0 ;;
        q)  CLENV_QUIET=1 ;;
    esac
done
shift $(($OPTIND-1))

for d in "$CLENV_DIR" "$CLENV_DIR/.bin" "$CLENV_DIR/.ext" ; do
    [ -d "$d" ] || mkdir -p "$d"
done

if [ -n "${CLENV_XCALL:-}" ] ; then
    _ext_"$CLENV_XCALL" "$@"
elif [ ${CLENV_NEW:-0} -eq 1 ] ; then
    _clenv_new "$@"
elif [ ${CLENV_LIST:-0} -eq 1 ] ; then
    if [ $# -gt 0 ] ; then  _clenv_list "$@"
    else _clenv_list "$CLENV_DIR"/* ; fi
elif [ -n "${CLENV_REQUIRES:-}" ] ; then
    while read -r LINE ; do $0 -E "$LINE" ; done < "$CLENV_REQUIRES"
elif [ $# -lt 1 -a -n "${CLENV_E_NAME:-}" ] ; then
    _clenv_ext_install "$CLENV_E_NAME" "${CLENV_E_ENVIRON:-}"
elif [ $# -gt 0 ] ; then
    _clenv_exec "$@"
fi
